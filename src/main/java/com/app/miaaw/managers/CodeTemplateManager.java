package com.app.miaaw.managers;

import com.app.miaaw.Domain.Admin;
import com.app.miaaw.Domain.BasicBar;
import com.app.miaaw.Domain.CodeTemplate;
import com.app.miaaw.WebpageEnhancer.Enhancer;
import com.app.miaaw.WebpageEnhancer.SoupChef;
import com.app.miaaw.repos.BasicBarRepository;
import com.app.miaaw.repos.CodeTemplateRepository;
import com.app.miaaw.repos.FormOptiesRepository;
import com.app.miaaw.repos.TextToSpeechRepository;
import com.app.miaaw.repos.VideoOptiesRepository;
import com.app.miaaw.requests.EnhanceRequestFile;
import com.app.miaaw.requests.EnhanceRequestLink;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
* Generated by Spring Data Generator on 23/04/2019
*/
@Component
@RestController
@RequestMapping("/enhance")
public class CodeTemplateManager {
	private CodeTemplateRepository codeTemplateRepository;
	private FormOptiesRepository formOptiesRepository;
	private BasicBarRepository basicBarRepository;
	private TextToSpeechRepository textToSpeechRepository;
	private VideoOptiesRepository videoOptiesRepository;
	

	@Autowired
	public CodeTemplateManager(	CodeTemplateRepository codeTemplateRepository, 
								FormOptiesRepository formOptiesRepository, 
								BasicBarRepository basicBarRepository, 
								TextToSpeechRepository textToSpeechRepository,
								VideoOptiesRepository videoOptiesRepository) {
		
		this.codeTemplateRepository = codeTemplateRepository;
		this.formOptiesRepository = formOptiesRepository;
		this.basicBarRepository = basicBarRepository;
		this.textToSpeechRepository = textToSpeechRepository;
	}
	@PostMapping("/link")
	public ResponseEntity getEnhancedLink(@RequestBody EnhanceRequestLink request) throws IOException, JSONException {
		String htmlCode = "";
		String link = request.getLink();
		boolean describeImage = false;
		
		CodeTemplate codeTemplate = new CodeTemplate();
		if (request.isFormOpties() != false) {
			long formId = 2;
			codeTemplate.setFormOpties(formOptiesRepository.findById(formId).get());
		}
		if (request.isBasicBar() != false) {
			long basicBarId = 7;
			codeTemplate.setBasicBar(basicBarRepository.findById(basicBarId).get());
		}
		if (request.isTextToSpeech() != false) {
			long ttsId = 2;
			codeTemplate.setTextToSpeech(textToSpeechRepository.findById(ttsId).get());
		}
		if (request.isImgOpties() != false) {
			describeImage = true;
		}
		
		codeTemplateRepository.save(codeTemplate);
		
		htmlCode = Enhancer.enhanceDocument(SoupChef.makeLinkSoup(link), codeTemplate, describeImage).toString();
		return ResponseEntity.status(200).body(htmlCode);
		
	}
	
	@PostMapping("/file")
	public ResponseEntity getEnhancedFile(@RequestBody EnhanceRequestFile request) throws IOException, JSONException{
		String htmlCode = "";
		String file = request.getFile();
		boolean describeImage = false;
		
		CodeTemplate codeTemplate = new CodeTemplate();
		if (request.isFormOpties() != false) {
			long formId = 2;
			codeTemplate.setFormOpties(formOptiesRepository.findById(formId).get());
		}
		if (request.isBasicBar() != false) {
			long basicBarId = 7;
			codeTemplate.setBasicBar(basicBarRepository.findById(basicBarId).get());
		}
		if (request.isTextToSpeech() != false) {
			long ttsId = 2;
			codeTemplate.setTextToSpeech(textToSpeechRepository.findById(ttsId).get());
		}
		if (request.isImgOpties() != false) {
			describeImage = true;
		}
		
		codeTemplateRepository.save(codeTemplate);
		
		htmlCode = Enhancer.enhanceDocument(SoupChef.makeFileSoup(file), codeTemplate, describeImage).toString();
		return ResponseEntity.status(200).body(htmlCode);
		
	}
}
